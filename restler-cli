#!/bin/bash 

# IMPORTANT: the cli-config.txt must contain a blank line at the end

usage() {
    printf "\nUsage:\n\n"
    printf "./restler-cli set [--api_spec=STR] [--grammar_file=STR] [--dictionary_file=STR] [--settings_file=STR] \ \n"
    printf "                   [--token_refresh_command=STR] [--token_refresh_interval=INT_SECS] [--time_budget=INT_HRS] [--endpoints_file=STR]\n"
    printf "NOTE: set an argument to NULL to exclude it from. \n\n\n"
    printf "./restler-cli run [--all] | [--compile] [--test] [--fuzzlean] [--fuzz] \n"
    printf "NOTE: the '--all' flag must be run alone and there may not be duplicate flags. \n\n\n"
    printf "./restler-cli split \n"
    printf "NOTE: this command assumes the file in api_spec must be split by endpoints_file \n\n\n"
    printf "./restler-cli to_json\n"
    printf "NOTE: this command assumes the file in api_spec is YAML. It automatically sets api_spec to the generated JSON file. \n\n\n"
    printf "./restler-cli list\n\n\n"
    exit 1
}

set_config() {
    param=${1}
    value=${2}
    temp_file="cli-config-temp.txt"
    if [ -e ${temp_file} ]; then
        rm ${temp_file}
    fi
    touch ${temp_file}
    found=false
    while read line; do 
        len=${#param}
        if [ ${line:0:${len}} = ${param} ]; then
            found=true
            new_line="${param}=${value}"
            echo ${new_line} >> ${temp_file} 
        else
            echo ${line} >> ${temp_file}
        fi 
    done < "cli-config.txt"
    if [ ${found} = false ]; then
        found=true
        new_line="${param}=${value}"
        echo ${new_line} >> ${temp_file} 
    fi
    rm cli-config.txt
    mv ${temp_file} cli-config.txt
    printf "${param} has been set to ${value} \n\n"
}

run_process() {
    process=${1}
    printf "Starting ${process}...\n"
    process_lc=$(echo "$process" | tr '[:upper:]' '[:lower:]') 

    if [ ${process_lc} = "compile" ]; then
        required_params=( "api_spec" )
    elif [ ${process_lc} = "test" ]; then
        required_params=( "grammar_file" "dictionary_file" "settings" "token_refresh_command" "token_refresh_interval" )
    elif [ ${process_lc} = "fuzz-lean" ]; then
        required_params=( "grammar_file" "dictionary_file" "settings" "token_refresh_command" "token_refresh_interval" )
    else
        required_params=( "grammar_file" "dictionary_file" "settings" "token_refresh_command" "token_refresh_interval" "time_budget" ) 
    fi
    
    params="${process_lc}"
    for p in ${required_params[@]}; do
        while read line; do 
            len=${#p}
            config_param=${line:0:${len}}
            if [ ${config_param} = ${p} ]; then
                config_value=${line:${len} + 1}
                if [ ! "${config_value}" = "NULL" ]; then
                    if [ ${p} = "token_refresh_command" ]; then
                        params=" ${params} --${p} '${config_value}'"
                    else
                        params=" ${params} --${p} ${config_value}"
                    fi 
                fi 
            fi
        done < "cli-config.txt" 
    done

    # echo $params
    dotnet ~/restler-fuzzer/restler_bin/restler/Restler.dll ${params}
    printf "${process} finished.\n\n"
}

if [ ${1} = "set" -a ${#} -ge 2 -a ${#} -le 7 ]; then
    n=${#}
    params=( "api_spec" "grammar_file" "dictionary_file" "settings_file" "token_refresh_command" "token_refresh_interval" "time_budget" "endpoints_file")
    # Syntax checking:
    for (( x=2; x <= n; x++ )) ; do
        if [ ${!x:0:2} = "--" ]; then
            arg=${!x:2}
            found=false
            for p in ${params[@]}; do
                len=${#p}
                if [ ${arg:0:${len}} = ${p} ]; then
                    if [ ! ${arg:${len}:1} = "=" ]; then 
                        usage 
                    fi
                    found=true
                    break
                fi
            done
            if [ ${found} = false ]; then
                usage
            fi
        else 
            usage
        fi
    done
    # Set param to value 
    for (( x=2; x <= n; x++ )) ; do
        arg=${!x:2}
        for p in ${params[@]}; do
            len=${#p}
            if [ ${arg:0:${len}} = ${p} ]; then
                value=${arg:${len} + 1}
                set_config ${p} ${value}
                break
            fi
        done
    done
elif [ ${1} = "run" -a ${#} -ge 2 -a ${#} -le 5 ]; then
    # Syntax checking
    n=${#}
    if [ \( \( ${#} -eq 2 \) -a \(  ${2} = "--all" \) \) ]; then
        do_nothing=0
    else 
        processes=( "compile" "test" "fuzzlean" "fuzz" )
        for (( x=2; x <= n; x++ )) ; do  
            arg=${!x:2}
            found=false
            for p in ${processes[@]}; do
                if [ ${arg} = ${p} ]; then
                    found=true
                    processes=("${processes[@]/${p}}")
                    break
                fi
            done
            if [ ${found} = false ]; then
                usage
            fi
         done
    fi 
    # Run specified process(es)
    for (( x=2; x <= n; x++ )) ; do 
        if [ ${!x} = "--all" ]; then
            run_process "Compile"
            run_process "Test"
            run_process "Fuzz-lean"
            run_process "Fuzz"
        elif [ ${!x} = "--compile" ]; then
            run_process "Compile"
        elif [ ${!x} = "--test" ]; then
            # run_process "Test"
            dotnet ~/restler-fuzzer/restler_bin/restler/Restler.dll test --grammar_file Compile/grammar.py --dictionary_file Compile/dict.json --settings engine_settings.json --token_refresh_command 'python3 ~/restler-fuzzer/auth.py' --token_refresh_interval 720
        elif [ ${!x} = "--fuzzlean" ]; then
            # run_process "Fuzz-lean"
            dotnet ~/restler-fuzzer/restler_bin/restler/Restler.dll fuzz-lean --grammar_file Compile/grammar.py --dictionary_file Compile/dict.json --settings engine_settings.json --token_refresh_command 'python3 ~/restler-fuzzer/auth.py' --token_refresh_interval 720
        elif [ ${!x} = "--fuzz" ]; then
            run_process "Fuzz"
        fi
    done
elif [ ${1} = "split" -a ${#} -eq 1 ]; then
    api_spec=""
    endpoints_file=""
    p1="api_spec"
    p1_len=${#p1}
    p2="endpoints_file"
    p2_len=${#p2}
    while read line; do     
        config_p1=${line:0:${p1_len}}
        if [ ${config_p1} = ${p1} ]; then
            api_spec=${line:${p1_len} + 1}
            if [ ${api_spec} = "NULL" ]; then 
                usage
            fi 
        fi
        config_p2=${line:0:${p2_len}}
        if [ ${config_p2} = ${p2} ]; then
            endpoints_file=${line:${p2_len} + 1}
            if [ ${endpoints_file} = "NULL" ]; then 
                usage
            fi 
        fi
    done < "cli-config.txt" 
    python3 -c "import split; split.split_spec('${api_spec}', '${endpoints_file}')" 
    printf "${api_spec} has been split according to ${endpoints_file}.\n"
elif [ ${1} = "to_json" -a ${#} -eq 1 ]; then
    input=""
    value_len=0
    p="api_spec"
    param_len=${#p}
    while read line; do     
        config_param=${line:0:${param_len}}
        if [ ${config_param} = ${p} ]; then
            input=${line:${param_len} + 1}
            value_len=${#input}
            if [ ${input} = "NULL" ] || [ ! ${input:${len}-5} = ".yaml" ]; then 
                usage
            fi 
            break
        fi
    done < "cli-config.txt" 
    output="${input:0:${value_len}-5}.json"
    yaml2json ${input} ${output}
    printf "${input} successfully converted to ${output}.\n\n"
    set_config "api_spec" ${output}
elif [ ${1} = "list" -a ${#} -eq 1 ]; then
    cat cli-config.txt
    printf '\n'
else
    usage
fi